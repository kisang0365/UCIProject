#pragma once
#include "Node.h"
#include <iostream>
#include <opencv\highgui.h>

Node::Node(){
	
}
Node::Node(unsigned int x, unsigned int y, unsigned int w, unsigned int h)
{
	x = x;
	y = y;
	w = w;
	h = h;
	for (int i = 0; i < SPLITE_SIZE; i++){
		children[i] = 0;
	}
}

void Node::setNode(unsigned int sizeX, unsigned int sizeY, std::vector<float> tempVector){
	size[0] = sizeX;
	size[1] = sizeY;
	isBlack = false;
	vectorToVector(sizeX, sizeY, tempVector);
}

void Node::dataToVector(unsigned int sizeX, unsigned int sizeY, float**arr){
	for (unsigned int i = 0; i < sizeX; i++){
		for (unsigned int j = 0; j < sizeY; j++){
			data.push_back(arr[i][j]);
		}
	}
}

void Node::vectorToVector(unsigned int sizeX, unsigned int sizeY, std::vector<float> tempVector){
	
	for (unsigned int i = 0; i < sizeX; i++){
		for (unsigned int j = 0; j < sizeY; j++){
			data.push_back(tempVector.at(i*sizeY + j));
		}
	}
}

void Node::splite(int type){

	std::vector<float> tempVector;

	if (type == 0){
		for (int i = 0; i < size[0] / 2; i++){
			for (int j = 0; j < size[1] / 2; j++){
				tempVector.push_back(tempVector.at(i*size[1] + j));
			}
		}
		size[0] = size[0] / 2;
		size[1] = size[1] / 2;
	}

	if (type == 1){
		for (int i = size[0] / 2; i < size[0]; i++){
			for (int j = 0; j < size[1] / 2; j++){
				tempVector.push_back(tempVector.at(i*size[1] + j));
			}
		}
		size[0] = size[0] - (size[0] / 2);
		size[1] = size[1] / 2;
	}

	if (type == 2){
		for (int i = 0; i < size[0] / 2; i++){
			for (int j = size[1] / 2; j < size[1]; j++){
				tempVector.push_back(tempVector.at(i*size[1] + j));
			}
		}
		size[0] = size[0] / 2;
		size[1] = size[1] - (size[1] / 2);
	}


	if (type == 3){
		for (int i = size[0]/2; i < size[0]; i++){
			for (int j = size[1]/2; j < size[1]; j++){
				tempVector.push_back(tempVector.at(i*size[1] + j));
			}
		}
		size[0] = size[0] - (size[0] / 2);
		size[1] = size[1] - (size[1] / 2);
	}

	data.clear();
	for (int i = 0; i < tempVector.size(); i++)
		data.push_back(tempVector.at(i));

}

void Node::clearVector(){
	data.clear();
}

bool Node::isLastNode(unsigned int sizeX, unsigned int sizeY){

	if (sizeX < 4 || sizeY < 4){
		return true;
	}
	
	if (BlackPicxel(sizeX, sizeY) == true)
		return true;

	return false;

}



bool Node::BlackPicxel(unsigned int sizeX, unsigned int sizeY){

	cv::Mat m = cv::Mat::zeros(sizeY, sizeX, CV_32FC1);

	for (unsigned int i = 0; i < sizeX; i++){
		for (unsigned int j = 0; j < sizeY; j++){
			m.at<float>(i, j) = data.at(sizeY*i + j);
		}
	}
	
	unsigned int blackPicxel = cv::countNonZero(m);
	unsigned int total = sizeX*sizeY;
	std::cout << blackPicxel << " " << total << " " << std::endl;
	if (blackPicxel == 0)
		isBlack = true;
	else
		isBlack = false;
	
	return isBlack;

}